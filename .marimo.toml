[display]
#   # Configuration for display.

#   **Keys.**
#   - `theme`: `"light"`, `"dark"`, or `"system"`
#   - `code_editor_font_size`: font size for the code editor
#   - `cell_output`: `"above"` or `"below"`
#   - `dataframes`: `"rich"` or `"plain"`
theme = "system"
code_editor_font_size = 14
cell_output = "above"
default_width = "medium"
dataframes = "rich"

[formatting]
line_length = 120

[keymap]
# # Configuration for keymaps.

#   **Keys.**
#   - `preset`: one of `"default"` or `"vim"`
#   - `overrides`: a dict of keymap actions to their keymap override
preset = "default"

[keymap.overrides]

[save]
#   # Configuration for saving.
#   **Keys.**

#   - `autosave`: one of `"off"` or `"after_delay"`
#   - `delay`: number of milliseconds to wait before autosaving
#   - `format_on_save`: if `True`, format the code on save
autosave = "after_delay"  # Automatically saves after a delay. Consider changing if frequent saves cause issues.
autosave_delay = 1000  # Delay (in milliseconds) before auto-saving. Adjust based on workflow preference.
format_on_save = true  # Disables automatic formatting on save. Enable if you prefer consistent formatting.

[package_management]
#   # Configuration options for package management.
#   **Keys.**

#   - `manager`: the package manager to use
manager = "uv"

[ai]
#   # Configuration options for AI.
#   **Keys.**

#   - `rules`: custom rules to include in all AI completion prompts
#   - `open_ai`: the OpenAI config
#   - `anthropic`: the Anthropic config
#   - `google`: the Google AI config

#  [open_ai]
#   # Configuration options for OpenAI or OpenAI-compatible services.
#     **Keys.**

#     - `api_key`: the OpenAI API key
#     - `model`: the model to use.
#         if model starts with `claude-` we use the AnthropicConfig
#     - `base_url`: the base URL for the API

#  api_key: str
#  model: str
#  base_url: str

#  [anthropic]
#   # Configuration options for Anthropic.
#   **Keys.**

#     - `api_key`: the Anthropic API key

#  api_key: str

#  [google]
#  # Configuration options for Google AI.
#  **Keys.**

#     - `api_key`: the Google AI API key

#  api_key: str

[runtime]
#   # Configuration for runtime.

#   **Keys.**
#   - `auto_instantiate`: if `False`, cells won't automatically
#       run on startup. This only applies when editing a notebook,
#       and not when running as an application.
#       The default is `True`.
#   - `auto_reload`: if `lazy`, cells importing modified modules will marked
#     as stale; if `autorun`, affected cells will be automatically run. similar
#     to IPython's %autoreload extension but with more code intelligence.
#   - `on_cell_change`: if `lazy`, cells will be marked stale when their
#     ancestors run but won't autorun; if `autorun`, cells will automatically
#     run when their ancestors run.
#   - `execution_type`: if `relaxed`, marimo will not clone cell declarations;
#     if `strict` marimo will clone cell declarations by default, avoiding
#     hidden potential state build up.
#   - `watcher_on_save`: how to handle file changes when saving. `"lazy"` marks
#       affected cells as stale, `"autorun"` automatically runs affected cells.
#   - `output_max_bytes`: the maximum size in bytes of cell outputs; larger
#       values may affect frontend performance
#   - `std_stream_max_bytes`: the maximum size in bytes of console outputs;
#     larger values may affect frontend performance
auto_instantiate = true
auto_reload = "off"
on_cell_change = "autorun"
watcher_on_save = "lazy"
output_max_bytes = 8000000
std_stream_max_bytes = 1000000

[experimental]

[server]
#   # Configuration for the server.
#   **Keys.**

#   - `browser`: the web browser to use. `"default"` or a browser registered
#       with Python's webbrowser module (eg, `"firefox"` or `"chrome"`)
#   - `follow_symlink`: if true, the server will follow symlinks it finds
#       inside its static assets directory.
browser = "default"  # Opens in the systemâ€™s default browser. Change to a specific browser if needed.
follow_symlink = false

[snippets]
#   # Configuration for snippets.
#   **Keys.**

#   - `custom_path`: the path to the custom snippets directory
custom_paths = []
include_default_snippets = true

[completion]
#   # Configuration for code completion.
#   A dict with key/value pairs configuring code completion in the marimo
#   editor.
#   **Keys.**
#   - `activate_on_typing`: if `False`, completion won't activate
#   until the completion hotkey is entered
#   - `copilot`: if `True`, enable the GitHub Copilot language server
activate_on_typing = false
copilot = true
